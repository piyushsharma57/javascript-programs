// callback functions

// function HOF(cb){

// }

// cars.forEach(cb);
let numbers = [1, 24, 13, 4, 0];

let strArr = ["Zgjas", "zakjd", "mdas", "asdkf", "ccsd", "yadsa"]


// numbers.sort((a, b) => a - b)
strArr.sort((a, b) => {
    a = a.toLowerCase()
    b = b.toLowerCase()
    if( a > b) return 1
    if( a < b) return -1
    return 0
})

function cb(item) {
  return item * 2;
}

function doubleTheElofArr(arr) {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    newArr[i] = arr[i] * 2;
  }
  return newArr;
}

let result = numbers.map(cb);
// console.log(result)

// function filterArr(arr, filterKeyword){
//     let newArr = [];
//     for(let i = 0; i < arr.length; i++){
//         if(arr[i].fuel === "Diesel"){
//             newArr.push(arr[i])
//         }
//     }
//     return newArr;
// }

// let filteredCars = filterArr(cars)

let filteredCars = cars.filter((car) => car.fuel === "Diesel");

function sumOfAllElemOfAnArr(arr) {
  let sum = 100;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  return sum;
}

let result4 = numbers.reduce((sum, curValue) => {
  return sum + curValue;
}, 100);


cars.sort((a, b) => {
    a = a.name.toLowerCase();
    b = b.name.toLowerCase();
    if( a > b) return 1
    if( a < b) return -1
    return 0
})


function sortCars(arr, sortBy, sortType, sortOrder){
    if(sortType === "string") stringSort(arr, sortBy, sortOrder)
    if(sortType === "number") numberSort(arr, sortBy, sortOrder)
}

// function sortCars(arr, sortBy, sortType, sortOrder) {
//   if (sortType === "string") return stringSort(arr, sortBy, sortOrder);
//   if (sortType === "number") return numberSort(arr, sortBy, sortOrder);
// }

// function stringSort(arr, sortBy, sortOrder) {
//   return arr.sort((a, b) => {
//     a = a[sortBy].toLowerCase();
//     b = b[sortBy].toLowerCase();
//     if (a > b) return sortOrder === 1 ? 1 : -1;
//     if (a < b) return sortOrder === 1 ? -1 : 1;
//     return 0;
//   });
// }

// function numberSort(arr, sortBy, sortOrder) {
//   return arr.sort((a, b) => {
//     return sortOrder === 1
//       ? parseInt(a[sortBy]) - parseInt(b[sortBy])
//       : parseInt(b[sortBy]) - parseInt(a[sortBy]);
//   });
// }

// let sortedCars = sortCars(cars, "price", "number", -1);

// function searching(arr, searchBy, searchKeyword) {
//   return arr.filter((item) =>{
//     let value = item[searchBy]
//     return value.split(" ").some((item) => item.toLowerCase().startsWith(searchKeyword.toLowerCase()));
//   }
//   );
// }


// destructuring
// alias
// let num = [1,23,4,6,8];
// let num2 = ["apple", "grapes"];
// let [first, second, ...others] = num;
// let num3 = [...num, ...num2]
// let result = num2.concat(num);
// let newCar = {
//   ...cars[0]
// }
// spread and rest operator
// let {name : myname, model, ...newObj} = cars[0]
// console.log(cars[0])
// console.log(myname, model)
// console.log(first, second)


// let sum = (a, b, ...args) => {
//   console.log(a, b)
//   console.log(args)
// }


// sum(1,2,65,5,6,4)


let person = {
  name : "John",
  age : 21,
  isVerified : false,

  walk(){
    console.log("John is walking")
  },
  speak(){
    console.log("John is speaking")
  }

}

// let person2 = 

// Encapsulation
// abstraction 
// inheritance 
// Polymorphism
